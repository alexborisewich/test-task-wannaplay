{"version":3,"file":"static/js/957.a8cb0025.chunk.js","mappings":"yNAMA,MAyEA,EAtE+CA,KAC7C,MAAMC,GAAMC,EAAAA,EAAAA,OAELC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAEnC,MAAEC,EAAK,OAAEC,GAAWN,EAAIO,OACxBC,EAAY,CAAEH,QAAOC,UAErBG,EAAQ,IAAIC,EAAAA,IAClBD,EAAME,UAAU,UAChBF,EAAMG,WAAW,EAAG,EAAG,IAEvB,MAAMC,EAAO,IAAIH,EAAAA,IAEXI,EAAgBC,EAAAA,IAAcC,OAAO,IAAKR,IAE1CS,EAAO,IAAIC,EAAAA,IAAaJ,GAE9B,IAAIK,GAAa,EACbC,EAA+B,KAEnC,MAwBMC,EAAkBA,KACtBF,GAAa,EACbC,EAAiB,KCxDuBE,EAACC,EAAwClB,EAAeC,KAClG,MAAMkB,EAAuBC,MAAMC,KAAKH,GACrCI,QAAO,CAACC,EAAGC,IAAMA,EAAI,IAAM,IAC3BC,QAAO,CAACC,EAAaC,KAChBA,EAAM,GAERD,IAEKA,IACN,GAECE,EAAkB5B,EAAQC,EAC1B4B,EAAaC,KAAKC,MAAOZ,EAAuBS,EAAmB,KAEzE,OADAI,QAAQC,KAAK,cAADC,OAAeL,EAAU,MAC9BA,GAAc,EAAE,ED8CjBZ,CAFWtB,EAAIwC,SAASC,QAAQlB,OAAOT,GAEFT,EAAOC,IAASH,GAAY,EAAM,EAG7E,OACEuC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,QAAM,EAACC,MA1DC,4CA0DyBxC,KACzCqC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLE,MA7DY,6CA8DRxC,EACJS,KAAMf,EAAWe,EAAO,KACxBgC,cAxCoBC,IAAkD,IAA/CC,QAAQ,EAAEC,EAAC,EAAEC,IAA4BH,EAChE/B,IACFV,EAAM6C,SAASC,IAAIH,EAAGC,GACtBrD,EAAIwC,SAASgB,OAAO/C,EAAO,CACzBK,gBACA2C,OAAO,EACPC,qBAAqB,IAGnBtC,IACFP,EAAK4C,QAAQE,UAAU,CAAEtD,MAAO,GAAIuD,MAAO,WAAYC,OAAOzC,EAAegC,EAAGhC,EAAeiC,GAAGS,OAAOV,EAAGC,GAC5GrD,EAAIwC,SAASgB,OAAO3C,EAAM,CACxBC,gBACA2C,OAAO,EACPC,qBAAqB,KAGzBtC,EAAiBA,GAAkB,IAAI2C,EAAAA,IACvC3C,EAAemC,IAAIH,EAAGC,GACxB,EAsBIW,cAnBoBC,IAAO9C,GAAa,EAoBxC+C,YAAa7C,EACb8C,mBAAoB9C,MAErB,EErED+C,EAAkB,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAajF,EAXwCC,KACtC,MAAMC,GAAUC,EAAAA,EAAAA,GAAc,sBAC9B,OACE7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CAACC,UAAU,UAAUC,GAAIT,EAAgBxB,UACjDC,EAAAA,EAAAA,KAACiC,EAAAA,GAAK,CAACzE,MAAOoE,EAAU,IAAO,IAAKnE,OAAQmE,EAAU,IAAM,IAAKM,QAAS,CAAEC,UAAW,UAAWpC,UAChGC,EAAAA,EAAAA,KAAC9C,EAAW,OAEJ,C","sources":["components/ScratchCard/ScratchCard.tsx","utils/calculatedScratchedPercentage.ts","components/GameView/GameView.tsx"],"sourcesContent":["import { Sprite, useApp } from '@pixi/react';\nimport { FederatedPointerEvent, Graphics, Sprite as OriginSprite, Point, RenderTexture } from 'pixi.js';\nimport { FC, useState } from 'react';\n\nimport { calculateScratchedPercentage } from 'utils/calculatedScratchedPercentage';\n\nconst bgImagePath = 'https://pixijs.com/assets/bg_rotate.jpg';\nconst maskImagePath = 'https://pixijs.com/assets/bg_grass.jpg';\n\nconst ScratchCard: FC<Record<string, never>> = () => {\n  const app = useApp();\n\n  const [showMask, setShowMask] = useState(true);\n\n  const { width, height } = app.screen;\n  const stageSize = { width, height };\n\n  const brush = new Graphics();\n  brush.beginFill(0xffffff);\n  brush.drawCircle(0, 0, 25);\n\n  const line = new Graphics();\n\n  const renderTexture = RenderTexture.create({ ...stageSize });\n\n  const mask = new OriginSprite(renderTexture);\n\n  let isDragging = false;\n  let lastDrawnPoint: Point | null = null;\n\n  const handlePointerMove = ({ global: { x, y } }: FederatedPointerEvent) => {\n    if (isDragging) {\n      brush.position.set(x, y);\n      app.renderer.render(brush, {\n        renderTexture,\n        clear: false,\n        skipUpdateTransform: false\n      });\n\n      if (lastDrawnPoint) {\n        line.clear().lineStyle({ width: 50, color: 0xffffff }).moveTo(lastDrawnPoint.x, lastDrawnPoint.y).lineTo(x, y);\n        app.renderer.render(line, {\n          renderTexture,\n          clear: false,\n          skipUpdateTransform: false\n        });\n      }\n      lastDrawnPoint = lastDrawnPoint || new Point();\n      lastDrawnPoint.set(x, y);\n    }\n  };\n\n  const handlePointerDown = () => (isDragging = true);\n\n  const handlePointerUp = () => {\n    isDragging = false;\n    lastDrawnPoint = null;\n\n    const pixels = app.renderer.extract.pixels(renderTexture);\n\n    if (calculateScratchedPercentage(pixels, width, height)) setShowMask(false);\n  };\n\n  return (\n    <>\n      <Sprite isMask image={maskImagePath} {...stageSize} />\n      <Sprite\n        image={bgImagePath}\n        {...stageSize}\n        mask={showMask ? mask : null}\n        onpointermove={handlePointerMove}\n        onpointerdown={handlePointerDown}\n        onpointerup={handlePointerUp}\n        onpointerupoutside={handlePointerUp}\n      />\n    </>\n  );\n};\n\nexport default ScratchCard;\n","export const calculateScratchedPercentage = (pixels: Uint8Array | Uint8ClampedArray, width: number, height: number) => {\n  const remainingPixelsCount = Array.from(pixels)\n    .filter((_, i) => i % 4 === 0)\n    .reduce((acc: number, val: number) => {\n      if (val > 0) {\n        // eslint-disable-next-line no-param-reassign\n        acc++;\n      }\n      return acc;\n    }, 0);\n\n  const totalPixelCount = width * height;\n  const percentage = Math.round((remainingPixelsCount / totalPixelCount) * 100);\n  console.warn(`Scratched: ${percentage}%`);\n  return percentage >= 80;\n};\n","import { Container, useMediaQuery } from '@mui/material';\nimport { Stage } from '@pixi/react';\nimport { FC } from 'react';\n\nimport ScratchCard from 'components/ScratchCard';\n\nconst containerStyles = { display: 'flex', justifyContent: 'center', alignItems: 'center' };\n\nconst Main: FC<Record<string, never>> = () => {\n  const desktop = useMediaQuery('(min-width:1200px)');\n  return (\n    <Container component=\"section\" sx={containerStyles}>\n      <Stage width={desktop ? 1000 : 500} height={desktop ? 800 : 600} options={{ eventMode: 'static' }}>\n        <ScratchCard />\n      </Stage>\n    </Container>\n  );\n};\n\nexport default Main;\n"],"names":["ScratchCard","app","useApp","showMask","setShowMask","useState","width","height","screen","stageSize","brush","Graphics","beginFill","drawCircle","line","renderTexture","RenderTexture","create","mask","OriginSprite","isDragging","lastDrawnPoint","handlePointerUp","calculateScratchedPercentage","pixels","remainingPixelsCount","Array","from","filter","_","i","reduce","acc","val","totalPixelCount","percentage","Math","round","console","warn","concat","renderer","extract","_jsxs","_Fragment","children","_jsx","Sprite","isMask","image","onpointermove","_ref","global","x","y","position","set","render","clear","skipUpdateTransform","lineStyle","color","moveTo","lineTo","Point","onpointerdown","handlePointerDown","onpointerup","onpointerupoutside","containerStyles","display","justifyContent","alignItems","Main","desktop","useMediaQuery","Container","component","sx","Stage","options","eventMode"],"sourceRoot":""}